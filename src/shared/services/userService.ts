import { 
  collection, 
  doc, 
  setDoc, 
  getDoc, 
  updateDoc, 
  getDocs,
  query,
  where,
  orderBy,
  Timestamp 
} from 'firebase/firestore';
import { db, isFirebaseConfigured } from '../config/firebase';
import { UsuarioStatus, criarUsuarioStatus, SolicitacaoAprovacao } from '../types/usuario';

class UserService {
  private readonly COLLECTION_USERS = 'users';
  private readonly COLLECTION_ADMIN = 'admin_settings';

  // Criar registro de usu√°rio ap√≥s registro Firebase
  async criarUsuarioStatus(uid: string, email: string, displayName?: string): Promise<void> {
    if (!isFirebaseConfigured() || !db) {
      console.warn('Firebase n√£o configurado - usu√°rio n√£o salvo no Firestore');
      return;
    }

    try {
      const usuarioStatus = criarUsuarioStatus(uid, email, displayName);
      
      await setDoc(doc(db, this.COLLECTION_USERS, uid), {
        ...usuarioStatus,
        dataCriacao: Timestamp.fromDate(usuarioStatus.dataCriacao)
      });

      console.log('‚úÖ Status do usu√°rio criado no Firestore');

      // Enviar notifica√ß√£o para admin
      await this.enviarNotificacaoNovoUsuario(usuarioStatus);
    } catch (error) {
      console.error('‚ùå Erro ao criar status do usu√°rio:', error);
      throw new Error('Erro interno ao processar registro');
    }
  }

  // Verificar se usu√°rio est√° aprovado
  async verificarStatusUsuario(uid: string): Promise<UsuarioStatus | null> {
    if (!isFirebaseConfigured() || !db) {
      console.warn('Firebase n√£o configurado - assumindo usu√°rio aprovado');
      return null;
    }

    try {
      const docRef = doc(db, this.COLLECTION_USERS, uid);
      const docSnap = await getDoc(docRef);

      if (!docSnap.exists()) {
        console.warn('Usu√°rio n√£o encontrado no Firestore');
        return null;
      }

      const data = docSnap.data();
      return {
        ...data,
        dataCriacao: data.dataCriacao?.toDate() || new Date(),
        dataAprovacao: data.dataAprovacao?.toDate()
      } as UsuarioStatus;
    } catch (error) {
      console.error('‚ùå Erro ao verificar status:', error);
      return null;
    }
  }

  // Listar usu√°rios pendentes (para admin)
  async listarUsuariosPendentes(): Promise<UsuarioStatus[]> {
    if (!isFirebaseConfigured() || !db) {
      return [];
    }

    try {
      const q = query(
        collection(db, this.COLLECTION_USERS),
        where('status', '==', 'pendente'),
        orderBy('dataCriacao', 'desc')
      );

      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => {
        const data = doc.data();
        return {
          ...data,
          dataCriacao: data.dataCriacao?.toDate() || new Date(),
          dataAprovacao: data.dataAprovacao?.toDate()
        } as UsuarioStatus;
      });
    } catch (error) {
      console.error('‚ùå Erro ao listar usu√°rios pendentes:', error);
      return [];
    }
  }

  // Aprovar usu√°rio
  async aprovarUsuario(uid: string, aprovadoPor: string): Promise<void> {
    if (!isFirebaseConfigured() || !db) {
      throw new Error('Firebase n√£o configurado');
    }

    try {
      const docRef = doc(db, this.COLLECTION_USERS, uid);
      await updateDoc(docRef, {
        status: 'aprovado',
        dataAprovacao: Timestamp.now(),
        aprovadoPor
      });

      console.log('‚úÖ Usu√°rio aprovado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao aprovar usu√°rio:', error);
      throw new Error('Erro ao aprovar usu√°rio');
    }
  }

  // Rejeitar usu√°rio
  async rejeitarUsuario(uid: string, motivo: string, rejeitadoPor: string): Promise<void> {
    if (!isFirebaseConfigured() || !db) {
      throw new Error('Firebase n√£o configurado');
    }

    try {
      const docRef = doc(db, this.COLLECTION_USERS, uid);
      await updateDoc(docRef, {
        status: 'rejeitado',
        dataAprovacao: Timestamp.now(),
        motivoRejeicao: motivo,
        aprovadoPor: rejeitadoPor
      });

      console.log('‚úÖ Usu√°rio rejeitado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao rejeitar usu√°rio:', error);
      throw new Error('Erro ao rejeitar usu√°rio');
    }
  }

  // Verificar se usu√°rio √© admin
  async verificarSeEhAdmin(uid: string): Promise<boolean> {
    if (!isFirebaseConfigured() || !db) {
      return false;
    }

    try {
      const docRef = doc(db, this.COLLECTION_ADMIN, 'admins');
      const docSnap = await getDoc(docRef);

      if (!docSnap.exists()) {
        return false;
      }

      const data = docSnap.data();
      return data.lista?.includes(uid) || false;
    } catch (error) {
      console.error('‚ùå Erro ao verificar admin:', error);
      return false;
    }
  }

  // Enviar notifica√ß√£o de novo usu√°rio (simula√ß√£o - voc√™ pode integrar com servi√ßo real)
  private async enviarNotificacaoNovoUsuario(usuario: UsuarioStatus): Promise<void> {
    try {
      console.log('üìß Nova solicita√ß√£o de acesso recebida:');
      console.log('- Email:', usuario.email);
      console.log('- UID:', usuario.uid);
      console.log('- Data:', usuario.dataCriacao);

      // Aqui voc√™ pode integrar com:
      // - EmailJS para envio direto
      // - API de email do seu servidor
      // - Webhook/notifica√ß√£o push
      // - Telegram Bot
      // - Etc.

      // Exemplo de payload para webhook:
      const notificationPayload = {
        type: 'new_user_registration',
        usuario: {
          email: usuario.email,
          uid: usuario.uid,
          dataCriacao: usuario.dataCriacao.toISOString(),
        },
        message: `Novo usu√°rio "${usuario.email}" solicitou acesso ao sistema.`,
        actionUrl: `${window.location.origin}/admin/usuarios` // URL para aprovar
      };

      console.log('üì§ Payload de notifica√ß√£o:', notificationPayload);
      
      // TODO: Implementar envio real de email/webhook aqui
      
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
    }
  }
}

export const userService = new UserService();
